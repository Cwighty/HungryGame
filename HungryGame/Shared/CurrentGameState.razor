@inject GameLogic gameInfo
@implements IDisposable

<h3>Game State: @gameInfo.CurrentGameState</h3>
@if (@gameInfo.GameEndsOn.HasValue)
{
    <h5>Game resets at @gameInfo.GameEndsOn.Value.ToString("h:mm tt") (@timeRemaining remain)</h5>
}

@code {
    [CascadingParameter]
    public SharedStateClass SharedState { get; set; }
    private System.Timers.Timer timer;
    private string timeRemaining;

    protected override void OnInitialized()
    {
        gameInfo.GameStateChanged += (_, _) => InvokeAsync(() => StateHasChanged());
        timer = new System.Timers.Timer(1_000);
        timer.Elapsed += (_, _) =>
        {
            var formatString = @"mm\:ss";
            if (gameInfo.TimeRemaining < TimeSpan.FromSeconds(10))
            {
                timer.Interval = 250;
                formatString = @"s\.fff";
            }
            InvokeAsync(() =>
            {
                timeRemaining = gameInfo?.TimeRemaining?.ToString(formatString) ?? "";
                StateHasChanged();
            });
        };
        timer.Start();
    }

    public void Dispose()
    {
        timer.Dispose();
    }
}