@inject GameLogic gameInfo
@implements IDisposable

<h3>Game State: @gameInfo.CurrentGameState</h3>
@if(SharedState.GameEndsOn.HasValue && gameInfo.CurrentGameState != GameState.GameOver)
{
    <h5>Game resets at @gameInfo.GameEndsOn.Value.ToShortTimeString() (@timeRemaining remain)</h5>
}

<table>
    @for (int row = 0; row < gameInfo.MaxRows; row++)
    {
        <tr>
            @for (int col = 0; col < gameInfo.MaxCols; col++)
            {
                var cell = gameInfo.GetCell(row, col) ?? throw new CellNotFoundException();

                <td>
                    @(cell.OccupiedBy?.Id.ToString() ?? (cell.IsPillAvailable ? (SharedState?.CellIcon ?? "?") : " "))
                </td>
            }
        </tr>
    }
</table>

@code {
    const string UnicodeFigureSpace_U2007 = " ";

    [CascadingParameter]
    public SharedStateClass SharedState{  get;  set; }
    private System.Timers.Timer timer;
    private string timeRemaining;

    protected override void OnInitialized()
    {
        gameInfo.GameStateChanged += (_, _) => InvokeAsync(() => StateHasChanged());
        timer = new System.Timers.Timer(1_000);
        timer.Elapsed += (_, _) =>
        {
            var formatString = @"mm\:ss";
            if (gameInfo.TimeRemaining < TimeSpan.FromSeconds(10))
            {
                timer.Interval = 250;
                formatString = @"s\.fff";
            }
            InvokeAsync(() =>
            {
                timeRemaining = gameInfo.TimeRemaining.Value.ToString(formatString);
                StateHasChanged();
            });
        };
        timer.Start();
    }

    public void Dispose()
    {
        timer.Dispose();
    }
}
