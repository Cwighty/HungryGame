@inject GameLogic gameInfo
@inject ILogger<AddPlayer> log
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Mvc

<div class="w-50" @onkeydown=keyPress tabindex="0" @ref="myDiv">
    @if (joined)
    {
        <div class="row">
            <div class="col-1"></div>
            <div class="col-1">
                <button @onclick="moveUp">⬆</button>
            </div>
        </div>
        <div class="row">
            <div class="col-1">
                <button @onclick="moveLeft">⬅</button>
            </div>
            <div class="col-1"></div>
            <div class="col-1">
                <button @onclick="moveRight">➡</button>
            </div>
        </div>
        <div class="row">
            <div class="col-1"></div>
            <div class="col-1">
                <button @onclick="moveDown">⬇</button>
            </div>
        </div>

    }
    else if (gameAlreadyStarted)
    {
        <div class="error">Too late.  Game already started.</div>
    }
    else
    {
        <EditForm Model="@joinPlayerInfo" OnValidSubmit="@HandleValidSubmit">
            <InputText DisplayName="Player Name" @bind-Value="joinPlayerInfo.PlayerName" />
            <button type="submit">Join Player</button>
        </EditForm>
    }
</div>


@code
{
    private class JoinPlayerInfo
    {
        [Required]
        public string? PlayerName { get; set; }
    }
    private JoinPlayerInfo joinPlayerInfo = new();
    private bool joined = false;
    private bool gameAlreadyStarted = false;
    private string token = null;
    private ElementReference myDiv;

    private async Task HandleValidSubmit()
    {
        try
        {
            token = gameInfo.JoinPlayer(joinPlayerInfo?.PlayerName);
            joined = true;
            joinPlayerInfo.PlayerName = null;
            await myDiv.FocusAsync();
        }
        catch (GameAlreadyStartedException)
        {
            gameAlreadyStarted = true;
        }
    }

    private void keyPress(KeyboardEventArgs args)
    {
        var direction = args.Key switch
        {
            "ArrowUp" => Direction.Up,
            "ArrowLeft" => Direction.Left,
            "ArrowRight" => Direction.Right,
            "ArrowDown" => Direction.Down,
            _ => Direction.Undefined
        };
        if (direction != Direction.Undefined)
        {
            gameInfo.Move(token, direction);
        }
    }

    private void moveUp() => gameInfo.Move(token, Direction.Up);
    private void moveRight() => gameInfo.Move(token, Direction.Right);
    private void moveLeft() => gameInfo.Move(token, Direction.Left);
    private void moveDown() => gameInfo.Move(token, Direction.Down);
}